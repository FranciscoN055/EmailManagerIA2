#!/usr/bin/env python3
"""
Script para verificar emails procesados y su persistencia
"""

import os
import sys
from dotenv import load_dotenv
from datetime import datetime

# Agregar el directorio app al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def verificar_emails_procesados():
    """Verificar emails procesados y su persistencia"""
    
    print("üìß VERIFICACI√ìN DE EMAILS PROCESADOS")
    print("=" * 50)
    
    try:
        # Importar modelos y configurar Flask
        from app import create_app, db
        from app.models.email import Email
        from app.models.email_account import EmailAccount
        from app.models.user import User
        
        app = create_app()
        
        with app.app_context():
            # Obtener estad√≠sticas de emails procesados
            total_emails = Email.query.count()
            processed_emails = Email.query.filter_by(processing_status='processed').count()
            completed_emails = Email.query.filter_by(processing_status='completed').count()
            pending_emails = Email.query.filter_by(processing_status='pending').count()
            
            print(f"üìä ESTAD√çSTICAS DE EMAILS:")
            print(f"   Total de emails: {total_emails}")
            print(f"   Procesados: {processed_emails}")
            print(f"   Completados: {completed_emails}")
            print(f"   Pendientes: {pending_emails}")
            
            # Verificar emails con urgency_category = 'processed'
            processed_by_urgency = Email.query.filter_by(urgency_category='processed').count()
            print(f"   Con urgencia 'processed': {processed_by_urgency}")
            
            # Verificar emails marcados como le√≠dos
            read_emails = Email.query.filter_by(is_read=True).count()
            print(f"   Marcados como le√≠dos: {read_emails}")
            
            # Mostrar emails procesados recientes
            print(f"\nüìÖ EMAILS PROCESADOS RECIENTES:")
            recent_processed = Email.query.filter(
                Email.processing_status == 'processed'
            ).order_by(Email.updated_at.desc()).limit(10).all()
            
            for email in recent_processed:
                print(f"   ‚úÖ {email.subject[:50]}... - {email.urgency_category} - {email.updated_at.strftime('%Y-%m-%d %H:%M')}")
            
            # Verificar si hay diferencias entre processing_status y urgency_category
            print(f"\nüîç VERIFICACI√ìN DE CONSISTENCIA:")
            
            # Emails con processing_status='processed' pero urgency_category diferente
            inconsistent_processed = Email.query.filter(
                Email.processing_status == 'processed',
                Email.urgency_category != 'processed'
            ).count()
            
            print(f"   Emails con processing_status='processed' pero urgency_category diferente: {inconsistent_processed}")
            
            # Emails con urgency_category='processed' pero processing_status diferente
            inconsistent_urgency = Email.query.filter(
                Email.urgency_category == 'processed',
                Email.processing_status != 'processed'
            ).count()
            
            print(f"   Emails con urgency_category='processed' pero processing_status diferente: {inconsistent_urgency}")
            
            # Verificar persistencia - emails que se mantienen como procesados
            print(f"\nüíæ VERIFICACI√ìN DE PERSISTENCIA:")
            
            # Emails que han sido procesados y se mantienen as√≠
            persistent_processed = Email.query.filter(
                Email.processing_status == 'processed',
                Email.urgency_category == 'processed'
            ).count()
            
            print(f"   Emails consistentemente procesados: {persistent_processed}")
            
            # Mostrar algunos ejemplos de emails procesados
            if persistent_processed > 0:
                print(f"\nüìã EJEMPLOS DE EMAILS PROCESADOS:")
                examples = Email.query.filter(
                    Email.processing_status == 'processed',
                    Email.urgency_category == 'processed'
                ).order_by(Email.updated_at.desc()).limit(5).all()
                
                for email in examples:
                    print(f"   ‚Ä¢ {email.subject[:40]}...")
                    print(f"     - ID: {email.id}")
                    print(f"     - Procesado: {email.updated_at.strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"     - Le√≠do: {email.is_read}")
                    print()
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

def mostrar_diferencias_entre_usuarios():
    """Mostrar posibles diferencias entre usuarios"""
    
    print("\n" + "="*60)
    print("üîç POSIBLES DIFERENCIAS ENTRE USUARIOS")
    print("="*60)
    
    print("\n1Ô∏è‚É£ DIFERENCIAS EN LA BASE DE DATOS:")
    print("   ‚Ä¢ Tu sistema: Emails se marcan como 'processed' y se mantienen")
    print("   ‚Ä¢ Su sistema: Emails NO se marcan como 'processed' o se revierten")
    print("   ‚Ä¢ Posible causa: Diferentes configuraciones de base de datos")
    
    print("\n2Ô∏è‚É£ DIFERENCIAS EN EL C√ìDIGO:")
    print("   ‚Ä¢ Tu sistema: C√≥digo actualizado con persistencia")
    print("   ‚Ä¢ Su sistema: C√≥digo anterior sin persistencia")
    print("   ‚Ä¢ Posible causa: Diferentes versiones del c√≥digo")
    
    print("\n3Ô∏è‚É£ DIFERENCIAS EN LA CONFIGURACI√ìN:")
    print("   ‚Ä¢ Tu sistema: Configuraci√≥n correcta de la base de datos")
    print("   ‚Ä¢ Su sistema: Configuraci√≥n incorrecta o base de datos diferente")
    print("   ‚Ä¢ Posible causa: Diferentes archivos .env o configuraciones")
    
    print("\n4Ô∏è‚É£ DIFERENCIAS EN EL COMPORTAMIENTO:")
    print("   ‚Ä¢ Tu sistema: Respuestas se env√≠an y se marcan como procesadas")
    print("   ‚Ä¢ Su sistema: Respuestas fallan o no se marcan correctamente")
    print("   ‚Ä¢ Posible causa: Errores en el env√≠o de respuestas")

def mostrar_soluciones():
    """Mostrar soluciones para el problema"""
    
    print("\n" + "="*60)
    print("üõ†Ô∏è  SOLUCIONES PARA EL PROBLEMA")
    print("="*60)
    
    print("\n1Ô∏è‚É£ VERIFICAR CONFIGURACI√ìN DE BASE DE DATOS:")
    print("   ‚Ä¢ Comparar archivos .env")
    print("   ‚Ä¢ Verificar conexi√≥n a la base de datos")
    print("   ‚Ä¢ Revisar permisos de escritura")
    
    print("\n2Ô∏è‚É£ VERIFICAR C√ìDIGO:")
    print("   ‚Ä¢ Comparar versiones del c√≥digo")
    print("   ‚Ä¢ Verificar que tenga la √∫ltima versi√≥n")
    print("   ‚Ä¢ Revisar logs de errores")
    
    print("\n3Ô∏è‚É£ VERIFICAR FUNCIONALIDAD DE RESPUESTAS:")
    print("   ‚Ä¢ Probar env√≠o de respuestas")
    print("   ‚Ä¢ Verificar que se marquen como procesadas")
    print("   ‚Ä¢ Revisar logs de Microsoft Graph")
    
    print("\n4Ô∏è‚É£ SINCRONIZAR CONFIGURACIONES:")
    print("   ‚Ä¢ Asegurar que ambos tengan el mismo c√≥digo")
    print("   ‚Ä¢ Verificar configuraciones id√©nticas")
    print("   ‚Ä¢ Revisar variables de entorno")

if __name__ == "__main__":
    verificar_emails_procesados()
    mostrar_diferencias_entre_usuarios()
    mostrar_soluciones()
