#!/usr/bin/env python3
"""
Script para verificar pol√≠ticas y restricciones de OpenAI
"""

import os
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime

def verificar_politicas_openai():
    """Verificar pol√≠ticas y restricciones de OpenAI"""
    
    print("üîç VERIFICACI√ìN DE POL√çTICAS OPENAI")
    print("=" * 50)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Cargar variables de entorno
    load_dotenv()
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå No se encontr√≥ OPENAI_API_KEY")
        return
    
    print(f"\nüîë API Key: {api_key[:20]}...")
    
    try:
        client = OpenAI(api_key=api_key)
        
        # Probar diferentes tipos de llamadas
        print("\n1Ô∏è‚É£ Probando llamadas b√°sicas...")
        
        # Llamada simple
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "Hola"}],
                max_tokens=5
            )
            print("‚úÖ Llamada simple: OK")
            print(f"   Tokens: {response.usage.total_tokens}")
        except Exception as e:
            print(f"‚ùå Llamada simple: {e}")
            return
        
        # Llamada con m√°s tokens
        print("\n2Ô∏è‚É£ Probando llamada con m√°s tokens...")
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "Escribe un p√°rrafo corto sobre inteligencia artificial"}],
                max_tokens=100
            )
            print("‚úÖ Llamada con m√°s tokens: OK")
            print(f"   Tokens: {response.usage.total_tokens}")
        except Exception as e:
            print(f"‚ùå Llamada con m√°s tokens: {e}")
        
        # Llamada con temperatura alta
        print("\n3Ô∏è‚É£ Probando llamada con temperatura alta...")
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "OK"}],
                max_tokens=5,
                temperature=1.0
            )
            print("‚úÖ Llamada con temperatura alta: OK")
        except Exception as e:
            print(f"‚ùå Llamada con temperatura alta: {e}")
        
        print("\n‚úÖ Tu cuenta funciona correctamente")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")

def mostrar_diferencias_politicas():
    """Mostrar diferencias en pol√≠ticas de OpenAI"""
    
    print("\n" + "="*60)
    print("üìã DIFERENCIAS EN POL√çTICAS DE OPENAI")
    print("="*60)
    
    print("\nüïê CUENTAS ANTIGUAS (como la tuya):")
    print("   ‚úÖ $5 USD de cr√©ditos gratuitos")
    print("   ‚úÖ Sin restricciones de verificaci√≥n")
    print("   ‚úÖ Funciona inmediatamente")
    print("   ‚úÖ Sin m√©todo de pago requerido")
    
    print("\nüïê CUENTAS NUEVAS (como la de tu compa√±era):")
    print("   ‚ö†Ô∏è  $5 USD de cr√©ditos gratuitos")
    print("   ‚ùå Verificaci√≥n de cuenta requerida")
    print("   ‚ùå M√©todo de pago obligatorio en algunas regiones")
    print("   ‚ùå Restricciones geogr√°ficas m√°s estrictas")
    print("   ‚ùå Verificaci√≥n de identidad en algunos casos")
    
    print("\nüåç RESTRICCIONES POR REGI√ìN:")
    print("   ‚Ä¢ Europa: Verificaci√≥n adicional requerida")
    print("   ‚Ä¢ Latinoam√©rica: Algunos pa√≠ses restringidos")
    print("   ‚Ä¢ Asia: Pol√≠ticas m√°s estrictas")
    print("   ‚Ä¢ √Åfrica: Restricciones variables")
    
    print("\nüìÖ CAMBIOS RECIENTES:")
    print("   ‚Ä¢ 2024: Restricciones en Europa")
    print("   ‚Ä¢ 2024: Verificaci√≥n de identidad requerida")
    print("   ‚Ä¢ 2024: M√©todo de pago obligatorio en algunas regiones")
    print("   ‚Ä¢ 2024: L√≠mites de uso m√°s estrictos")

def mostrar_soluciones_para_compa√±era():
    """Mostrar soluciones espec√≠ficas para la compa√±era"""
    
    print("\n" + "="*60)
    print("üõ†Ô∏è  SOLUCIONES PARA TU COMPA√ëERA")
    print("="*60)
    
    print("\n1Ô∏è‚É£ VERIFICAR CUENTA:")
    print("   ‚Ä¢ Ve a: https://platform.openai.com/account")
    print("   ‚Ä¢ Completa la verificaci√≥n de identidad")
    print("   ‚Ä¢ Agrega n√∫mero de tel√©fono")
    print("   ‚Ä¢ Verifica el email")
    
    print("\n2Ô∏è‚É£ CONFIGURAR FACTURACI√ìN:")
    print("   ‚Ä¢ Ve a: https://platform.openai.com/billing")
    print("   ‚Ä¢ Agrega m√©todo de pago")
    print("   ‚Ä¢ Configura l√≠mite de gasto ($5-10 USD)")
    print("   ‚Ä¢ Obtiene $5 adicionales inmediatamente")
    
    print("\n3Ô∏è‚É£ USAR TU API KEY (temporal):")
    print("   ‚Ä¢ Ya funciona (como confirmaste)")
    print("   ‚Ä¢ Consume tus cr√©ditos")
    print("   ‚Ä¢ Solo para desarrollo/testing")
    print("   ‚Ä¢ No recomendado para producci√≥n")
    
    print("\n4Ô∏è‚É£ USAR CLASIFICACI√ìN POR REGLAS:")
    print("   ‚Ä¢ El sistema ya tiene fallback autom√°tico")
    print("   ‚Ä¢ Funciona sin OpenAI")
    print("   ‚Ä¢ No consume cr√©ditos")
    print("   ‚Ä¢ Menos preciso pero funcional")
    
    print("\nüí° RECOMENDACI√ìN:")
    print("   ‚Ä¢ Para desarrollo: Usar tu key temporalmente")
    print("   ‚Ä¢ Para producci√≥n: Configurar su propia facturaci√≥n")
    print("   ‚Ä¢ Alternativa: Usar clasificaci√≥n por reglas")

if __name__ == "__main__":
    verificar_politicas_openai()
    mostrar_diferencias_politicas()
    mostrar_soluciones_para_compa√±era()



