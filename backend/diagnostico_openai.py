#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar configuraci√≥n de OpenAI
"""

import os
import sys
from dotenv import load_dotenv

def diagnosticar_openai():
    """Diagnosticar configuraci√≥n de OpenAI"""
    
    print("üîç DIAGN√ìSTICO DE OPENAI - Email Manager IA")
    print("=" * 60)
    
    # Cargar variables de entorno
    load_dotenv()
    
    # 1. Verificar archivo .env
    print("\n1Ô∏è‚É£ Verificando archivo .env...")
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_file):
        print("‚úÖ Archivo .env encontrado")
    else:
        print("‚ùå Archivo .env NO encontrado")
        print("üí° Soluci√≥n: Crear archivo .env con tu API key")
        return False
    
    # 2. Verificar API key
    print("\n2Ô∏è‚É£ Verificando OPENAI_API_KEY...")
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY no encontrada")
        print("üí° Soluci√≥n: Agregar OPENAI_API_KEY=tu-key-aqui al archivo .env")
        return False
    
    if api_key == 'your-openai-api-key-here':
        print("‚ùå OPENAI_API_KEY tiene valor por defecto")
        print("üí° Soluci√≥n: Reemplazar con tu API key real")
        return False
    
    print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:20]}...")
    
    # 3. Verificar otras configuraciones
    print("\n3Ô∏è‚É£ Verificando otras configuraciones...")
    
    model = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
    max_tokens = os.getenv('OPENAI_MAX_TOKENS', '1000')
    temperature = os.getenv('OPENAI_TEMPERATURE', '0.3')
    
    print(f"   Modelo: {model}")
    print(f"   Max tokens: {max_tokens}")
    print(f"   Temperature: {temperature}")
    
    # 4. Probar conexi√≥n
    print("\n4Ô∏è‚É£ Probando conexi√≥n con OpenAI...")
    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        
        # Llamada simple
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "user", "content": "Responde solo 'OK'"}
            ],
            max_tokens=5
        )
        
        content = response.choices[0].message.content.strip()
        print(f"‚úÖ Conexi√≥n exitosa: '{content}'")
        
        # Mostrar uso de tokens
        usage = response.usage
        print(f"   Tokens consumidos: {usage.total_tokens}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def mostrar_solucion():
    """Mostrar soluci√≥n paso a paso"""
    
    print("\n" + "="*60)
    print("üõ†Ô∏è  SOLUCI√ìN PASO A PASO")
    print("="*60)
    
    print("\n1Ô∏è‚É£ Crear cuenta en OpenAI:")
    print("   ‚Ä¢ Ve a: https://platform.openai.com")
    print("   ‚Ä¢ Reg√≠strate (gratis)")
    print("   ‚Ä¢ Verifica tu email")
    
    print("\n2Ô∏è‚É£ Obtener API Key:")
    print("   ‚Ä¢ Ve a: https://platform.openai.com/api-keys")
    print("   ‚Ä¢ Click 'Create new secret key'")
    print("   ‚Ä¢ Copia la key (empieza con sk-proj-)")
    
    print("\n3Ô∏è‚É£ Crear archivo .env:")
    print("   ‚Ä¢ En la carpeta 'backend' crea archivo .env")
    print("   ‚Ä¢ Agrega esta l√≠nea:")
    print("     OPENAI_API_KEY=sk-proj-tu-key-aqui")
    
    print("\n4Ô∏è‚É£ Verificar configuraci√≥n:")
    print("   ‚Ä¢ Ejecuta: python diagnostico_openai.py")
    print("   ‚Ä¢ Debe mostrar '‚úÖ Conexi√≥n exitosa'")
    
    print("\nüí∞ Sobre los cr√©ditos:")
    print("   ‚Ä¢ OpenAI da $5 USD gratis al registrarse")
    print("   ‚Ä¢ Es suficiente para cientos de clasificaciones")
    print("   ‚Ä¢ No necesitas meter dinero inicialmente")

def main():
    """Funci√≥n principal"""
    
    # Ejecutar diagn√≥stico
    funciona = diagnosticar_openai()
    
    if funciona:
        print("\nüéâ ¬°TODO FUNCIONA CORRECTAMENTE!")
        print("‚úÖ Tu configuraci√≥n de OpenAI est√° bien")
        print("‚úÖ El sistema deber√≠a clasificar emails con IA")
    else:
        print("\n‚ö†Ô∏è  HAY PROBLEMAS DE CONFIGURACI√ìN")
        mostrar_solucion()
    
    print("\n" + "="*60)
    print("üí° Si sigues teniendo problemas, contacta al equipo de desarrollo")

if __name__ == "__main__":
    main()
